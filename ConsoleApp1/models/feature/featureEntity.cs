// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DndFeatureJson;
//
//    var the5EFeatures = The5EFeatures.FromJson(jsonString);

namespace DndFeatureJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5EFeatures
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("class")]
        public Class Class { get; set; }

        [JsonProperty("subclass")]
        public Subclass Subclass { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public long? Level { get; set; }

        [JsonProperty("desc")]
        public List<string> Desc { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("reference", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Reference { get; set; }

        [JsonProperty("choice", NullValueHandling = NullValueHandling.Ignore)]
        public Choice Choice { get; set; }

        [JsonProperty("prerequisites", NullValueHandling = NullValueHandling.Ignore)]
        public List<Prerequisite> Prerequisites { get; set; }

        [JsonProperty("group", NullValueHandling = NullValueHandling.Ignore)]
        public string Group { get; set; }
    }

    public partial class Choice
    {
        [JsonProperty("choose")]
        public long Choose { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("from")]
        public List<Class> From { get; set; }
    }

    public partial class Class
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Prerequisite
    {
        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("proficiency", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Proficiency { get; set; }

        [JsonProperty("spell", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Spell { get; set; }

        [JsonProperty("feature", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Feature { get; set; }

        [JsonProperty("level", NullValueHandling = NullValueHandling.Ignore)]
        public long? Level { get; set; }
    }

    public partial class Subclass
    {
        [JsonProperty("ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public enum TypeEnum { Feature, Level, Proficiency, Spell };

    public partial class The5EFeatures
    {
        public static List<The5EFeatures> FromJson(string json) => JsonConvert.DeserializeObject<List<The5EFeatures>>(json, DndClassJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5EFeatures> self) => JsonConvert.SerializeObject(self, DndClassJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Spell":
                    return TypeEnum.Spell;
                case "feature":
                    return TypeEnum.Feature;
                case "level":
                    return TypeEnum.Level;
                case "proficiency":
                    return TypeEnum.Proficiency;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Spell:
                    serializer.Serialize(writer, "Spell");
                    return;
                case TypeEnum.Feature:
                    serializer.Serialize(writer, "feature");
                    return;
                case TypeEnum.Level:
                    serializer.Serialize(writer, "level");
                    return;
                case TypeEnum.Proficiency:
                    serializer.Serialize(writer, "proficiency");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
