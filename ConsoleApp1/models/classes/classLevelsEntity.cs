// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DndClassLevelsJson;
//
//    var the5EClassLevels = The5EClassLevels.FromJson(jsonString);

namespace DndClassLevelsJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5EClassLevels
    {
        [JsonProperty("level")]
        public long Level { get; set; }

        [JsonProperty("ability_score_bonuses", NullValueHandling = NullValueHandling.Ignore)]
        public long? AbilityScoreBonuses { get; set; }

        [JsonProperty("prof_bonus", NullValueHandling = NullValueHandling.Ignore)]
        public long? ProfBonus { get; set; }

        [JsonProperty("feature_choices")]
        public List<Class> FeatureChoices { get; set; }

        [JsonProperty("features")]
        public List<Class> Features { get; set; }

        [JsonProperty("class_specific", NullValueHandling = NullValueHandling.Ignore)]
        public ClassSpecific ClassSpecific { get; set; }

        [JsonProperty("id", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Id { get; set; }

        [JsonProperty("class")]
        public Class Class { get; set; }

        [JsonProperty("subclass")]
        public Class Subclass { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }

        [JsonProperty("spellcasting", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, long> Spellcasting { get; set; }

        [JsonProperty("spell_slots_level_1", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel1 { get; set; }

        [JsonProperty("spell_slots_level_2", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel2 { get; set; }

        [JsonProperty("spell_slots_level_3", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel3 { get; set; }

        [JsonProperty("spell_slots_level_4", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel4 { get; set; }

        [JsonProperty("spell_slots_level_5", NullValueHandling = NullValueHandling.Ignore)]
        public long? SpellSlotsLevel5 { get; set; }

        [JsonProperty("aura_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? AuraRange { get; set; }

        [JsonProperty("ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("index", NullValueHandling = NullValueHandling.Ignore)]
        public long? Index { get; set; }

        [JsonProperty("subclass_specific", NullValueHandling = NullValueHandling.Ignore)]
        public SubclassSpecific SubclassSpecific { get; set; }
    }

    public partial class Class
    {
        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class ClassSpecific
    {
        [JsonProperty("rage_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? RageCount { get; set; }

        [JsonProperty("rage_damage_bonus", NullValueHandling = NullValueHandling.Ignore)]
        public long? RageDamageBonus { get; set; }

        [JsonProperty("brutal_critical_dice", NullValueHandling = NullValueHandling.Ignore)]
        public long? BrutalCriticalDice { get; set; }

        [JsonProperty("bardic_inspiration_die", NullValueHandling = NullValueHandling.Ignore)]
        public long? BardicInspirationDie { get; set; }

        [JsonProperty("song_of_rest_die", NullValueHandling = NullValueHandling.Ignore)]
        public long? SongOfRestDie { get; set; }

        [JsonProperty("magical_secrets_max_5", NullValueHandling = NullValueHandling.Ignore)]
        public long? MagicalSecretsMax5 { get; set; }

        [JsonProperty("magical_secrets_max_7", NullValueHandling = NullValueHandling.Ignore)]
        public long? MagicalSecretsMax7 { get; set; }

        [JsonProperty("magical_secrets_max_9", NullValueHandling = NullValueHandling.Ignore)]
        public long? MagicalSecretsMax9 { get; set; }

        [JsonProperty("channel_divinity_charges", NullValueHandling = NullValueHandling.Ignore)]
        public long? ChannelDivinityCharges { get; set; }

        [JsonProperty("destroy_undead_cr", NullValueHandling = NullValueHandling.Ignore)]
        public double? DestroyUndeadCr { get; set; }

        [JsonProperty("wild_shape_max_cr", NullValueHandling = NullValueHandling.Ignore)]
        public double? WildShapeMaxCr { get; set; }

        [JsonProperty("wild_shape_swim", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WildShapeSwim { get; set; }

        [JsonProperty("wild_shape_fly", NullValueHandling = NullValueHandling.Ignore)]
        public bool? WildShapeFly { get; set; }

        [JsonProperty("action_surges", NullValueHandling = NullValueHandling.Ignore)]
        public long? ActionSurges { get; set; }

        [JsonProperty("indomitable_uses", NullValueHandling = NullValueHandling.Ignore)]
        public long? IndomitableUses { get; set; }

        [JsonProperty("extra_attacks", NullValueHandling = NullValueHandling.Ignore)]
        public long? ExtraAttacks { get; set; }

        [JsonProperty("martial_arts", NullValueHandling = NullValueHandling.Ignore)]
        public MartialArts MartialArts { get; set; }

        [JsonProperty("ki_points", NullValueHandling = NullValueHandling.Ignore)]
        public long? KiPoints { get; set; }

        [JsonProperty("unarmored_movement", NullValueHandling = NullValueHandling.Ignore)]
        public long? UnarmoredMovement { get; set; }

        [JsonProperty("aura_range", NullValueHandling = NullValueHandling.Ignore)]
        public long? AuraRange { get; set; }

        [JsonProperty("favored_enemies", NullValueHandling = NullValueHandling.Ignore)]
        public long? FavoredEnemies { get; set; }

        [JsonProperty("favored_terrain", NullValueHandling = NullValueHandling.Ignore)]
        public long? FavoredTerrain { get; set; }

        [JsonProperty("sneak_attack", NullValueHandling = NullValueHandling.Ignore)]
        public MartialArts SneakAttack { get; set; }

        [JsonProperty("sorcery_points", NullValueHandling = NullValueHandling.Ignore)]
        public long? SorceryPoints { get; set; }

        [JsonProperty("metamagic_known", NullValueHandling = NullValueHandling.Ignore)]
        public long? MetamagicKnown { get; set; }

        [JsonProperty("creating_spell_slots", NullValueHandling = NullValueHandling.Ignore)]
        public List<CreatingSpellSlot> CreatingSpellSlots { get; set; }

        [JsonProperty("invocations_known", NullValueHandling = NullValueHandling.Ignore)]
        public long? InvocationsKnown { get; set; }

        [JsonProperty("mystic_arcanum_level_6", NullValueHandling = NullValueHandling.Ignore)]
        public long? MysticArcanumLevel6 { get; set; }

        [JsonProperty("mystic_arcanum_level_7", NullValueHandling = NullValueHandling.Ignore)]
        public long? MysticArcanumLevel7 { get; set; }

        [JsonProperty("mystic_arcanum_level_8", NullValueHandling = NullValueHandling.Ignore)]
        public long? MysticArcanumLevel8 { get; set; }

        [JsonProperty("mystic_arcanum_level_9", NullValueHandling = NullValueHandling.Ignore)]
        public long? MysticArcanumLevel9 { get; set; }

        [JsonProperty("arcane_recovery_levels", NullValueHandling = NullValueHandling.Ignore)]
        public long? ArcaneRecoveryLevels { get; set; }
    }

    public partial class CreatingSpellSlot
    {
        [JsonProperty("spell_slot_level")]
        public long SpellSlotLevel { get; set; }

        [JsonProperty("sorcery_point_cost")]
        public long SorceryPointCost { get; set; }
    }

    public partial class MartialArts
    {
        [JsonProperty("dice_count")]
        public long DiceCount { get; set; }

        [JsonProperty("dice_value")]
        public long DiceValue { get; set; }
    }

    public partial class SubclassSpecific
    {
        [JsonProperty("additional_magical_secrets_max_lvl")]
        public long AdditionalMagicalSecretsMaxLvl { get; set; }
    }

    public partial class The5EClassLevels
    {
        public static List<The5EClassLevels> FromJson(string json) => JsonConvert.DeserializeObject<List<The5EClassLevels>>(json, DndClassLevelsJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5EClassLevels> self) => JsonConvert.SerializeObject(self, DndClassLevelsJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
