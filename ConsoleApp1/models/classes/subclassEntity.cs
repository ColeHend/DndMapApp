// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DndClassJson;
//
//    var the5ESubClasses = The5ESubClasses.FromJson(jsonString);

namespace DndSubClassJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5ESubClasses
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("class")]
        public Class Class { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("subclass_flavor")]
        public string SubclassFlavor { get; set; }

        [JsonProperty("desc")]
        public List<string> Desc { get; set; }

        [JsonProperty("features")]
        public List<Feature> Features { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("spells", NullValueHandling = NullValueHandling.Ignore)]
        public List<Spell> Spells { get; set; }
    }

    public partial class Class
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Feature
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Spell
    {
        [JsonProperty("prerequisites")]
        public List<Prerequisite> Prerequisites { get; set; }

        [JsonProperty("spell")]
        public Class SpellSpell { get; set; }
    }

    public partial class Prerequisite
    {
        [JsonProperty("ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public TypeEnum? Type { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public enum Name { CircleOfTheLandArctic, CircleOfTheLandCoast, CircleOfTheLandDesert, CircleOfTheLandForest, CircleOfTheLandGrassland, CircleOfTheLandMountain, CircleOfTheLandSwamp };

    public enum TypeEnum { Level };

    public partial class The5ESubClasses
    {
        public static List<The5ESubClasses> FromJson(string json) => JsonConvert.DeserializeObject<List<The5ESubClasses>>(json, DndClassJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5ESubClasses> self) => JsonConvert.SerializeObject(self, DndClassJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NameConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class NameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Name) || t == typeof(Name?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            return value;
            // switch (value)
            // {
            //     case "Circle of the Land: Arctic":
            //         return Name.CircleOfTheLandArctic;
            //     case "Circle of the Land: Coast":
            //         return Name.CircleOfTheLandCoast;
            //     case "Circle of the Land: Desert":
            //         return Name.CircleOfTheLandDesert;
            //     case "Circle of the Land: Forest":
            //         return Name.CircleOfTheLandForest;
            //     case "Circle of the Land: Grassland":
            //         return Name.CircleOfTheLandGrassland;
            //     case "Circle of the Land: Mountain":
            //         return Name.CircleOfTheLandMountain;
            //     case "Circle of the Land: Swamp":
            //         return Name.CircleOfTheLandSwamp;
            // }
            throw new Exception("Cannot unmarshal type Name");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Name)untypedValue;
            switch (value)
            {
                case Name.CircleOfTheLandArctic:
                    serializer.Serialize(writer, "Circle of the Land: Arctic");
                    return;
                case Name.CircleOfTheLandCoast:
                    serializer.Serialize(writer, "Circle of the Land: Coast");
                    return;
                case Name.CircleOfTheLandDesert:
                    serializer.Serialize(writer, "Circle of the Land: Desert");
                    return;
                case Name.CircleOfTheLandForest:
                    serializer.Serialize(writer, "Circle of the Land: Forest");
                    return;
                case Name.CircleOfTheLandGrassland:
                    serializer.Serialize(writer, "Circle of the Land: Grassland");
                    return;
                case Name.CircleOfTheLandMountain:
                    serializer.Serialize(writer, "Circle of the Land: Mountain");
                    return;
                case Name.CircleOfTheLandSwamp:
                    serializer.Serialize(writer, "Circle of the Land: Swamp");
                    return;
            }
            throw new Exception("Cannot marshal type Name");
        }

        public static readonly NameConverter Singleton = new NameConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "level")
            {
                return TypeEnum.Level;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Level)
            {
                serializer.Serialize(writer, "level");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
