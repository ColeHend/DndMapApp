// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DndSubRaceJson;
//
//    var the5ESubRace = The5ESubRace.FromJson(jsonString);

namespace DndSubRaceJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5ESubRace
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("race")]
        public Race Race { get; set; }

        [JsonProperty("desc")]
        public string Desc { get; set; }

        [JsonProperty("ability_bonuses")]
        public List<AbilityBonus> AbilityBonuses { get; set; }

        [JsonProperty("ability_bonus_options", NullValueHandling = NullValueHandling.Ignore)]
        public AbilityBonusOptionsClass AbilityBonusOptions { get; set; }

        [JsonProperty("starting_proficiencies")]
        public List<Race> StartingProficiencies { get; set; }

        [JsonProperty("starting_proficiency_options")]
        public AbilityBonusOptionsClass StartingProficiencyOptions { get; set; }

        [JsonProperty("languages")]
        public List<Race> Languages { get; set; }

        [JsonProperty("language_options")]
        public LanguageOptionsClass LanguageOptions { get; set; }

        [JsonProperty("racial_traits")]
        public List<RacialTrait> RacialTraits { get; set; }

        [JsonProperty("racial_trait_options")]
        public LanguageOptionsClass RacialTraitOptions { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class AbilityBonusOptionsClass
    {
    }

    public partial class AbilityBonus
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("bonus")]
        public long Bonus { get; set; }
    }

    public partial class LanguageOptionsClass
    {
        [JsonProperty("choose", NullValueHandling = NullValueHandling.Ignore)]
        public long? Choose { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public List<Race> From { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class Race
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class RacialTrait
    {
        [JsonProperty("ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class The5ESubRace
    {
        public static List<The5ESubRace> FromJson(string json) => JsonConvert.DeserializeObject<List<The5ESubRace>>(json, DndSubRaceJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5ESubRace> self) => JsonConvert.SerializeObject(self, DndSubRaceJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
