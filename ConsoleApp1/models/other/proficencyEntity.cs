// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DndSpellCastingJson;
//
//    var the5EProficency = The5EProficency.FromJson(jsonString);

namespace DndProficencyJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5EProficency
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("classes")]
        public List<Class> Classes { get; set; }

        [JsonProperty("races")]
        public List<Class> Races { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class Class
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public enum TypeEnum { Armor, ArtisanSTools, GamingSets, MusicalInstruments, Other, SavingThrows, Skills, Vehicles, Weapons };

    public partial class The5EProficency
    {
        public static List<The5EProficency> FromJson(string json) => JsonConvert.DeserializeObject<List<The5EProficency>>(json, DndSpellCastingJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5EProficency> self) => JsonConvert.SerializeObject(self, DndSpellCastingJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Armor":
                    return TypeEnum.Armor;
                case "Artisan's Tools":
                    return TypeEnum.ArtisanSTools;
                case "Gaming Sets":
                    return TypeEnum.GamingSets;
                case "Musical Instruments":
                    return TypeEnum.MusicalInstruments;
                case "Other":
                    return TypeEnum.Other;
                case "Saving Throws":
                    return TypeEnum.SavingThrows;
                case "Skills":
                    return TypeEnum.Skills;
                case "Vehicles":
                    return TypeEnum.Vehicles;
                case "Weapons":
                    return TypeEnum.Weapons;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Armor:
                    serializer.Serialize(writer, "Armor");
                    return;
                case TypeEnum.ArtisanSTools:
                    serializer.Serialize(writer, "Artisan's Tools");
                    return;
                case TypeEnum.GamingSets:
                    serializer.Serialize(writer, "Gaming Sets");
                    return;
                case TypeEnum.MusicalInstruments:
                    serializer.Serialize(writer, "Musical Instruments");
                    return;
                case TypeEnum.Other:
                    serializer.Serialize(writer, "Other");
                    return;
                case TypeEnum.SavingThrows:
                    serializer.Serialize(writer, "Saving Throws");
                    return;
                case TypeEnum.Skills:
                    serializer.Serialize(writer, "Skills");
                    return;
                case TypeEnum.Vehicles:
                    serializer.Serialize(writer, "Vehicles");
                    return;
                case TypeEnum.Weapons:
                    serializer.Serialize(writer, "Weapons");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
