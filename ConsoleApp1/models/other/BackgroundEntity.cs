// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DndBackgroundsJson;
//
//    var the5EBackgrounds = The5EBackgrounds.FromJson(jsonString);

namespace DndBackgroundsJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5EBackgrounds
    {
        [JsonProperty("index")]
        public string Index { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("starting_proficiencies")]
        public List<StartingProficiency> StartingProficiencies { get; set; }

        [JsonProperty("language_options")]
        public LanguageOptions LanguageOptions { get; set; }

        [JsonProperty("starting_equipment")]
        public List<StartingEquipment> StartingEquipment { get; set; }

        [JsonProperty("starting_equipment_options")]
        public List<StartingEquipmentOption> StartingEquipmentOptions { get; set; }

        [JsonProperty("feature")]
        public Feature Feature { get; set; }

        [JsonProperty("personality_traits")]
        public Bonds PersonalityTraits { get; set; }

        [JsonProperty("ideals")]
        public Ideals Ideals { get; set; }

        [JsonProperty("bonds")]
        public Bonds Bonds { get; set; }

        [JsonProperty("flaws")]
        public Bonds Flaws { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class Bonds
    {
        [JsonProperty("choose")]
        public long Choose { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("from")]
        public BondsFrom From { get; set; }
    }

    public partial class BondsFrom
    {
        [JsonProperty("option_set_type")]
        public string OptionSetType { get; set; }

        [JsonProperty("options")]
        public List<PurpleOption> Options { get; set; }
    }

    public partial class PurpleOption
    {
        [JsonProperty("option_type")]
        public OptionType OptionType { get; set; }

        [JsonProperty("string")]
        public string String { get; set; }
    }

    public partial class Feature
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("desc")]
        public List<string> Desc { get; set; }
    }

    public partial class Ideals
    {
        [JsonProperty("choose")]
        public long Choose { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("from")]
        public IdealsFrom From { get; set; }
    }

    public partial class IdealsFrom
    {
        [JsonProperty("option_set_type")]
        public string OptionSetType { get; set; }

        [JsonProperty("options")]
        public List<FluffyOption> Options { get; set; }
    }

    public partial class FluffyOption
    {
        [JsonProperty("option_type")]
        public string OptionType { get; set; }

        [JsonProperty("desc")]
        public string Desc { get; set; }

        [JsonProperty("alignments")]
        public List<StartingProficiency> Alignments { get; set; }
    }

    public partial class StartingProficiency
    {
        [JsonProperty("index")]
        public string Index { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class LanguageOptions
    {
        [JsonProperty("choose")]
        public long Choose { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("from")]
        public LanguageOptionsFrom From { get; set; }
    }

    public partial class LanguageOptionsFrom
    {
        [JsonProperty("option_set_type")]
        public string OptionSetType { get; set; }

        [JsonProperty("resource_list_url")]
        public string ResourceListUrl { get; set; }
    }

    public partial class StartingEquipment
    {
        [JsonProperty("equipment")]
        public StartingProficiency Equipment { get; set; }

        [JsonProperty("quantity")]
        public long Quantity { get; set; }
    }

    public partial class StartingEquipmentOption
    {
        [JsonProperty("choose")]
        public long Choose { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("from")]
        public StartingEquipmentOptionFrom From { get; set; }
    }

    public partial class StartingEquipmentOptionFrom
    {
        [JsonProperty("option_set_type")]
        public string OptionSetType { get; set; }

        [JsonProperty("equipment_category")]
        public StartingProficiency EquipmentCategory { get; set; }
    }

    public enum OptionType { String };

    public partial class The5EBackgrounds
    {
        public static List<The5EBackgrounds> FromJson(string json) => JsonConvert.DeserializeObject<List<The5EBackgrounds>>(json, DndBackgroundsJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5EBackgrounds> self) => JsonConvert.SerializeObject(self, DndBackgroundsJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                OptionTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class OptionTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(OptionType) || t == typeof(OptionType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "string")
            {
                return OptionType.String;
            }
            throw new Exception("Cannot unmarshal type OptionType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (OptionType)untypedValue;
            if (value == OptionType.String)
            {
                serializer.Serialize(writer, "string");
                return;
            }
            throw new Exception("Cannot marshal type OptionType");
        }

        public static readonly OptionTypeConverter Singleton = new OptionTypeConverter();
    }
}
