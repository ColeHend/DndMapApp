// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using DndRacesJson;
//
//    var the5ERaces = The5ERaces.FromJson(jsonString);

namespace DndRacesJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class The5ERaces
    {
        [JsonProperty("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("speed")]
        public long Speed { get; set; }

        [JsonProperty("ability_bonuses")]
        public List<AbilityBonus> AbilityBonuses { get; set; }

        [JsonProperty("ability_bonus_options")]
        public AbilityBonusOptions AbilityBonusOptions { get; set; }

        [JsonProperty("alignment")]
        public string Alignment { get; set; }

        [JsonProperty("age")]
        public string Age { get; set; }

        [JsonProperty("size")]
        public string Size { get; set; }

        [JsonProperty("size_description")]
        public string SizeDescription { get; set; }

        [JsonProperty("starting_proficiencies")]
        public List<Language> StartingProficiencies { get; set; }

        [JsonProperty("starting_proficiency_options")]
        public StartingProficiencyOptions StartingProficiencyOptions { get; set; }

        [JsonProperty("languages")]
        public List<Language> Languages { get; set; }

        [JsonProperty("language_options")]
        public LanguageOptions LanguageOptions { get; set; }

        [JsonProperty("language_desc")]
        public string LanguageDesc { get; set; }

        [JsonProperty("traits")]
        public List<Trait> Traits { get; set; }

        [JsonProperty("subraces")]
        public List<Subrace> Subraces { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("trait_options", NullValueHandling = NullValueHandling.Ignore)]
        public TraitOptions TraitOptions { get; set; }
    }

    public partial class AbilityBonusOptions
    {
        [JsonProperty("choose", NullValueHandling = NullValueHandling.Ignore)]
        public long? Choose { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public List<AbilityBonus> From { get; set; }
    }

    public partial class AbilityBonus
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("bonus")]
        public long Bonus { get; set; }
    }

    public partial class LanguageOptions
    {
        [JsonProperty("choose", NullValueHandling = NullValueHandling.Ignore)]
        public long? Choose { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public List<Language> From { get; set; }
    }

    public partial class Language
    {
        [JsonProperty("ref", NullValueHandling = NullValueHandling.Ignore)]
        public string Ref { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Url { get; set; }
    }

    public partial class StartingProficiencyOptions
    {
        [JsonProperty("choose", NullValueHandling = NullValueHandling.Ignore)]
        public long? Choose { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public List<Subrace> From { get; set; }
    }

    public partial class Subrace
    {
        [JsonProperty("ref")]
        public string Ref { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class TraitOptions
    {
        [JsonProperty("choose", NullValueHandling = NullValueHandling.Ignore)]
        public long? Choose { get; set; }

        [JsonProperty("from", NullValueHandling = NullValueHandling.Ignore)]
        public List<Trait> From { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }
    }

    public partial class Trait
    {
        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }
    }

    public partial class The5ERaces
    {
        public static List<The5ERaces> FromJson(string json) => JsonConvert.DeserializeObject<List<The5ERaces>>(json, DndRacesJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<The5ERaces> self) => JsonConvert.SerializeObject(self, DndRacesJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
